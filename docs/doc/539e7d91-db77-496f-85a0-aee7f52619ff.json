{
    "summary": "The code includes a regex pattern for detecting and handling metadata in markdown, with functions to remove or replace it, and a function that dumps dictionaries as YAML. The function accepts markdown content, a first match string, and optional metadata, updates the content accordingly, and returns it.",
    "details": [
        {
            "comment": "Imports various libraries and defines a regular expression pattern for matching metadata in Markdown content.",
            "location": "\"/media/root/Prima/hexo_blog_demo/blog_template/docs/src/headline_match.py\":0-39",
            "content": "import re  # prefer regex over re? re.subn sucks.\nfrom typing import Optional, NewType, cast\nimport yaml\nfrom beartype import beartype\nimport orjson\nimport sys\nJSONDict = NewType(\"JSONDict\", dict)\n# Multiline regular expression to match the pattern\nmetadata_pattern = r\"\"\"^---$\n(.*?)\n^---$\n\"\"\"\n# Compile the regular expression\nmetadata_regex = re.compile(\n    metadata_pattern, re.MULTILINE | re.DOTALL | re.VERBOSE | re.UNICODE\n)\n@beartype\ndef purify_dict(obj: dict) -> JSONDict:\n    bytes_repr = orjson.dumps(obj)\n    new_obj = orjson.loads(bytes_repr)\n    return new_obj\n@beartype\ndef parse_content_metadata(markdown_content: str):\n    # Match the pattern in the Markdown content\n    matches = metadata_regex.findall(markdown_content)\n    has_metadata = len(matches) > 0\n    first_match = None\n    if has_metadata:\n        first_match = matches[0]\n        metadata = yaml.safe_load(\n            first_match\n        )  # this could parse string as datetime object.\n        assert isinstance(metadata, dict), \"error processing metadata\""
        },
        {
            "comment": "The code contains several functions for handling metadata within markdown content. The `remove_metadata` function replaces the first match with an empty string to remove it from the source, while `replace_metadata` replaces the first match with a specified replace_str. The `dump_dict_As_yaml` function dumps a dictionary as YAML and `modify_content_metadata` handles the main logic of detecting if the markdown has metadata and then purifying it or removing it accordingly.",
            "location": "\"/media/root/Prima/hexo_blog_demo/blog_template/docs/src/headline_match.py\":40-75",
            "content": "        content_without_metadata = remove_metadata(markdown_content, first_match)\n    else:\n        metadata = {}\n        content_without_metadata = markdown_content\n    purified_metadata = purify_dict(metadata)\n    return has_metadata, purified_metadata, content_without_metadata, first_match\n@beartype\ndef replace_metadata(source: str, first_match: str, replace_str: str, count=1):\n    # ref: https://github.com/thesimj/envyaml/commit/2418c7b0857d586f04a09a48697ab7c94a605ccb\n    result = source.replace(first_match, replace_str, count)\n    return result\n@beartype\ndef remove_metadata(source: str, first_match: str):\n    result = replace_metadata(source, first_match, \"\")\n    return result\n@beartype\ndef dump_dict_as_yaml(mdict:dict):\n    ret = yaml.safe_dump(\n                mdict,\n                width=sys.maxsize,\n                default_style='\"',\n                default_flow_style=True,\n                allow_unicode=True,\n            )\n    return ret\n@beartype\ndef modify_content_metadata(\n    markdown_content: str,\n    has_metadata: bool,"
        },
        {
            "comment": "This function takes markdown content, a first match string, and optional metadata as input. It replaces the metadata with the new metadata (if any) and joins it with the markdown content. If there is no existing metadata, it inserts the new metadata before the markdown content. Finally, it returns the updated content. The provided test case demonstrates this functionality.",
            "location": "\"/media/root/Prima/hexo_blog_demo/blog_template/docs/src/headline_match.py\":76-124",
            "content": "    metadata: dict,\n    first_match: Optional[str],\n):\n    replaced_metadata_str = dump_dict_as_yaml(metadata).strip()\n    replaced_metadata_str = f\"\"\"\n{replaced_metadata_str}\n\"\"\"\n    if has_metadata:\n        result = replace_metadata(\n            markdown_content, cast(str, first_match), replaced_metadata_str\n        )\n    else:\n        result = \"\\n\".join([replaced_metadata_str, markdown_content])\n    return result\ndef test_main():\n    # Sample Markdown content\n    markdown_content = \"\"\"\ncontent\n---\ntitle: Sample Title\ntags: [Tag1, Tag2]\n---\ncontent\ncontent\n---\ntitle: Sample Title\ntags: Tag1, Tag3\n---\n\"\"\"\n    (\n        has_metadata,\n        metadata,\n        content_without_metadata,\n        first_match,\n    ) = parse_content_metadata(markdown_content)\n    updated_content = modify_content_metadata(\n        markdown_content, has_metadata, {\"new_title\": \"Sample Title\"}, first_match\n    )\n    print(updated_content)\n    print(\"-\" * 20)\n    print(content_without_metadata)\n    print(\"-\" * 20)\n    print(metadata)\nif __name__ == \"__main__\":"
        },
        {
            "comment": "The code is calling the function test_main.",
            "location": "\"/media/root/Prima/hexo_blog_demo/blog_template/docs/src/headline_match.py\":125-125",
            "content": "    test_main()"
        }
    ]
}