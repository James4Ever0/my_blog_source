{
    "summary": "The code reads content strings, parses and modifies their metadata, removes \"created\" and \"modified\" keys and replaces `'` with &grave;. It syncs source directory content to Quarto format in a target directory, creating subdirectories based on filenames without extension, fixes line wrapping issues, and writes new content as .qmd files.",
    "details": [
        {
            "comment": "The code reads a content string, parses its metadata, modifies the metadata by removing \"created\" and \"modified\" keys and replacing occurrences of `'` with &grave; in strings or lists, and then returns the modified content and metadata.",
            "location": "\"/media/root/Prima/hexo_blog_demo/blog_template/docs/src/sync_to_quarto.py\":0-32",
            "content": "source_dir = \"source/_posts\"\ntarget_dir = \"quarto_blog/myblog/posts\"\nimport os\nimport shutil\nfrom headline_match import parse_content_metadata, dump_dict_as_yaml\nfrom beartype import beartype\nfrom io_utils import load_file, write_file\n@beartype\ndef fix_metadata_line_wrap_in_content(content: str):\n    (\n        has_metadata,\n        metadata,\n        content_without_metadata,\n        first_match,\n    ) = parse_content_metadata(content)\n    if has_metadata:\n        if metadata is not None:\n            for k in [\"created\", \"modified\"]:\n                if k in metadata.keys():\n                    del metadata[k]\n            keys = list(metadata.keys())\n            for k in keys:\n                v = metadata[k]\n                if isinstance(v, str):\n                    metadata[k] = v.replace(\"`\", \"&grave;\")\n                elif isinstance(v, list):\n                    metadata[k] = [\n                        x if not isinstance(x, str) else x.replace(\"`\", \"&grave;\")\n                        for x in v\n                    ]"
        },
        {
            "comment": "Code syncs content from a source directory to Quarto format in a target directory. It first checks if the target directory exists, removes it if it does, and then creates it. For each file in the source directory, it loads the content, fixes any line wrapping issues in the metadata section, and assigns an identifier based on the filename without extension. It then creates a subdirectory in the target directory for each identifier and writes the new content as a Quarto (.qmd) file in the corresponding subdirectory.",
            "location": "\"/media/root/Prima/hexo_blog_demo/blog_template/docs/src/sync_to_quarto.py\":33-61",
            "content": "            metadata[\"categories\"] = metadata.get(\"tags\", [])\n            repl = dump_dict_as_yaml(metadata)\n            new_content = (\n                \"---\\n\"\n                + repl\n                + \"\\n---\\n\"\n                + (\"\\n\" + content_without_metadata + \"\\n\").replace(\n                    \"\\n---\\n\", \"\\n------\\n\"\n                )\n            )\n            return new_content\n    return content\n# you need to convert multiline yaml into one\nif os.path.exists(target_dir):\n    shutil.rmtree(target_dir)\nos.mkdir(target_dir)\nfor fname in os.listdir(source_dir):\n    source_path = os.path.join(source_dir, fname)\n    content = load_file(source_path)\n    new_content = fix_metadata_line_wrap_in_content(content)\n    identifier = fname.split(\".\")[0]\n    target_subdir = os.path.join(target_dir, identifier)\n    os.mkdir(target_subdir)\n    target_path = os.path.join(target_subdir, \"index.qmd\")\n    write_file(target_path, new_content)"
        }
    ]
}